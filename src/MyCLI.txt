class MyCLI(CLI):
    def __init__( self, mininet, stdin=sys.stdin, script=None ):
        CLI.__init__(self,mininet,stdin, script)
        print "The network is start when you add a new Controller"

    def do_rm(self,line):
        if len(line) < 1 :
            print "Usage :rm <node>"
            return
        args = line.split()
        try:
            n = self.mn.get(args[0])
        except KeyError:
            print "Fail to remove %s " %args[0]
        else:
            n.stop()
            if type(n) == Host:
                self.mn.hosts.remove(n)
            elif type(n) == RemoteController:
                self.mn.controllers.remove(n)
            elif type(n) == MyUserSwitch:
                self.mn.switches.remove(n)
            del self.nodemap[ n.name ]
            self.nodelist = self.mn.controllers + self.mn.switches + self.mn.hosts
            print "Node %s deleted" % args[0]

    def do_add(self,line):
        if len(line) < 1 :
            print "Usage :add (host|link|switch)"
            return
        args = line.split()
        try:
            func = self.adds.get(args[0])
            func(self,args[1:])
        except KeyError:
            print "Erreur %s element doesn't exist" % args[0]

    def add_switch(self,args):
        if len(args) < 1 :
            print "Usage: add switch <name> [<dpid>]"
            return
        defaults = {}
        if len(args) > 1 :
            defaults[ 'dpid'] = args[1]
        s = self.mn.addSwitch(args[0],cls=MyUserSwitch,**defaults)
        try:
            self.mn.get(args[0])
        except KeyError:
            print "Fail to add Switch"
        else:
            self.nodelist = self.mn.controllers + self.mn.switches + self.mn.hosts
            self.nodemap[ s.name ] = s
            print "Switch added"

    def add_link(self,args):
        if len(args) < 2 :
            print "Usage: add link <node1> <node2>"
            return
        try:
            n0 = self.mn.get(args[0])
        except KeyError:
            res = quietRun( 'ip addr show ' + args[0])
            ips = re.findall( r'\d+\.\d+\.\d+\.\d+',res)
            if ips or re.findall(r'not exist',res):
                print "Fail to add Link %s" %res
                return 
            else:
                n0 = args[0]
        try:
            n1 = self.mn.get(args[1])
        except KeyError:
            res = quietRun( 'ip addr show ' + args[1])
            ips = re.findall( r'\d+\.\d+\.\d+\.\d+',res)
            if ips or re.findall(r'not exist',res):
                print "Fail to add Link %s" %res
                return 
            else:
                n1 = args[1]
        if type(n0) == str :
            MYTCIntf(n0,node=n1)
        elif type(n1) == str:
            MYTCIntf(n1,node=n0)
        else:
            self.mn.addLink(n0, n1)
            n0.configDefault()
            n1.configDefault()
        print "Link added"

    def add_host(self,args):
        if len(args) < 1 :
            print "Usage: add host <name> [<ip> [<cpu> [<mac>]]]"
            return
        defaults = { }
        if len(args) > 1 :
            defaults[ 'ip'] = args[1]
        if len(args) > 2 :
            defaults[ 'cpu'] = args[2]
        if len(args) > 3 :
            defaults[ 'mac'] = args[3]
        self.mn.addHost(args[0],**defaults)
        try:
            h = self.mn.get(args[0])
        except KeyError:
            print "Fail to add Host"
        else:
            self.nodelist = self.mn.controllers + self.mn.switches + self.mn.hosts
            self.nodemap[ h.name ] = h
            print "Host added"

    def add_ctrl(self,args):
        if len(args) < 2 and args[1] in ('up','down'):
            print "Usage: add host <name> <ip>"
            return
        try:
            c = self.mn.addController(args[0],ips=args[1])
        except KeyError:
            print "Fail to add Controller"
        else:
            self.nodelist = self.mn.controllers + self.mn.switches + self.mn.hosts
            self.nodemap[ c.name ] = c
            print "Controller added"

    def do_sleep(self,line):
        args = line.split()
        t = 1
        if len(args) > 0 :
            t = int(args[0])
        time.sleep(t)

    def do_start(self,line):
        if len(self.mn.controllers) < 1 :
            print "Must be setting up one controller"
            return
        for s in self.mn.switches:
            s.restart(self.mn.controllers)

    adds = {
            "host":add_host,
            "link":add_link,
            "switch":add_switch,
            "ctrl":add_ctrl,
            "controller":add_ctrl,
            }

    def do_node(self,line):
        args = line.split()
        if len(args) < 2 :
            print "Usage node <node> (down|up)"
            return
        try:
            n = self.mn.get(args[0])
        except KeyError:
            print "Node not exist "
        else:
            for k,i in n.nameToIntf.items():
                if i.link :
                    i.link.intf1.ifconfig(args[1])
                    i.link.intf2.ifconfig(args[1])

    def do_tc(self,line):
        args = line.split()
        if len(args) < 4 :
            print "Usage tc <node1> <node2> (bw|loss|delay|jitter) <val> "
            return
        args = line.split()
        try:
            src = self.mn.get( args[0] )
            dst = self.mn.get( args[1] )
        except KeyError:
            print "Node not exist "
        else:

            connections = src.connectionsTo( dst )
            if len( connections ) == 0:
                error( 'src and dst not connected: %s %s\n' % ( src, dst) )
            i = 2
            n = len(args)
            status = {}
            while i < n :
                if args[i] in  ('loss','bw','delay','jitter'):
                    val = int(args[i+1])
                    if val >= 0 :
                        if args[i] == 'loss' and val >= 100 :
                            error('loss must be between 0 and 100')
                        elif args[i] == 'bw' and val >= 1000 :
                            error('loss must be between 0 and 1000')
                        else:
                            status[args[i]] = val
                    else:
                        error('value for tc must be > 0')
                i=i+2virtualb	
            for srcIntf, dstIntf in connections:
                result = srcIntf.config( **status )
                print result['tcoutputs']
                result = dstIntf.config( **status )
                print result['tcoutputs']

